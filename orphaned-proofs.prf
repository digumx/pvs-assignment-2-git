("majority" majority Concat_Size 0 (Concat_Size-1 nil 3795087145 ("" (skolem!) (("" (induct v2) (("1" (assert) (("1" (postpone) nil nil)) nil) ("2" (postpone) nil nil)) nil)) nil) nil shostak))("majority" majority xConcat_Size 0 (xConcat_Size-1 nil 3795087273 ("" (auto-rewrite-defs) (("" (skolem!) (("" (induct v2) (("1" (assert) nil nil) ("2" (skosimp*) (("2" (assert) nil nil)) nil)) nil)) nil)) nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil) (VoteSequence_induction formula-decl nil majority nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (concat def-decl "VoteSequence" majority nil) (size def-decl "nat" majority nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (= const-decl "[T, T -> boolean]" equalities nil) (number nonempty-type-decl nil numbers nil) (boolean nonempty-type-decl nil booleans nil) (VoteSequence type-decl nil majority nil)) shostak))("majority" majority Concat_Test_ 0 (Concat_Test_-1 nil 3795095609 ("" (assert) (("" (auto-rewrite-defs) (("" (assert) (("" (postpone) nil nil)) nil)) nil)) nil) nil shostak))