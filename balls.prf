(balls
 (add_b_TCC1 0
  (add_b_TCC1-1 nil 3795501142
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (add_b subtype "((number_fields.+)(balls.b`1, 1), balls.b`2)"
    "Bag")))
 (add_w_TCC1 0
  (add_w_TCC1-1 nil 3795501142
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (add_w subtype "(balls.b`1, (number_fields.+)(balls.b`2, 1))"
    "Bag")))
 (remove_b_TCC1 0
  (remove_b_TCC1-1 nil 3795493517
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil (remove_b subtype "(number_fields.-)(balls.bg`1, 1)" "nat")))
 (remove_b_TCC2 0
  (remove_b_TCC2-1 nil 3795501142 ("" (subtype-tcc) nil nil) nil nil
   (remove_b subtype "((number_fields.-)(balls.bg`1, 1), balls.bg`2)"
    "Bag")))
 (remove_w_TCC1 0
  (remove_w_TCC1-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (remove_w subtype "(number_fields.-)(balls.bg`2, 1)" "nat")))
 (remove_w_TCC2 0
  (remove_w_TCC2-1 nil 3795501142 ("" (subtype-tcc) nil nil) nil nil
   (remove_w subtype "(balls.bg`1, (number_fields.-)(balls.bg`2, 1))"
    "Bag")))
 (ball_step_TCC1 0
  (ball_step_TCC1-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_step subtype "balls.bg" "{b: balls.Bag | reals.>(b`1, 0)}")))
 (ball_step_TCC2 0
  (ball_step_TCC2-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_step subtype "balls.remove_b(balls.bg)"
    "{b: balls.Bag | reals.>(b`1, 0)}")))
 (ball_step_TCC3 0
  (ball_step_TCC3-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_step subtype "balls.bg" "{b: balls.Bag | reals.>(b`2, 0)}")))
 (ball_step_TCC4 0
  (ball_step_TCC4-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_step subtype "balls.remove_w(balls.bg)"
    "{b: balls.Bag | reals.>(b`1, 0)}")))
 (ball_step_TCC5 0
  (ball_step_TCC5-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_step subtype "balls.bg" "{b: balls.Bag | reals.>(b`1, 0)}")))
 (ball_step_TCC6 0
  (ball_step_TCC6-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_step subtype "balls.remove_b(balls.bg)"
    "{b: balls.Bag | reals.>(b`2, 0)}")))
 (ball_step_TCC7 0
  (ball_step_TCC7-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_step subtype "balls.bg" "{b: balls.Bag | reals.>(b`2, 0)}")))
 (ball_step_TCC8 0
  (ball_step_TCC8-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_step subtype "balls.remove_w(balls.bg)"
    "{b: balls.Bag | reals.>(b`2, 0)}")))
 (ball_game_TCC1 0
  (ball_game_TCC1-1 nil 3795493517 ("" (subtype-tcc) nil nil) nil nil
   (ball_game subtype "balls.bg"
    "{b: balls.Bag | reals.>=(balls.size(b), 2)}")))
 (ball_game_TCC2 0
  (ball_game_TCC2-1 nil 3795493517 ("" (termination-tcc) nil nil) nil
   nil
   (ball_game termination "balls.ball_game(balls.ball_step(balls.bg))"
    "nil")))
 (Ball_Step_Reduce_TCC1 0
  (Ball_Step_Reduce_TCC1-1 nil 3795509271 ("" (subtype-tcc) nil nil)
   nil nil
   (Ball_Step_Reduce subtype "balls.bg"
    "{b: balls.Bag | reals.>=(balls.size(b), 2)}")))
 (Ball_Step_Reduce 0
  (Ball_Step_Reduce-1 nil 3795509272
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (rewrite ball_step 1) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (add_b const-decl "Bag" balls nil)
    (remove_w const-decl "Bag" balls nil)
    (add_w const-decl "Bag" balls nil)
    (remove_b const-decl "Bag" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (size const-decl "nat" balls nil) (Bag type-eq-decl nil balls nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ball_step const-decl "Bag" balls nil))
   shostak))
 (Bag_Size_One 0
  (Bag_Size_One-1 nil 3795512806
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (decompose-equality)
        (("" (case "bg!1`1 = 1 OR bg!1`2 = 1")
          (("1" (split -1)
            (("1" (propax) nil nil) ("2" (assert) nil nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (size const-decl "nat" balls nil))
   shostak))
 (Even_Black_Inv 0
  (Even_Black_Inv-1 nil 3795493525
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (rewrite ball_step)
        (("" (lift-if)
          (("" (smash)
            (("1" (skosimp*)
              (("1" (inst 1 "j!1 - 1") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (skosimp*)
              (("2" (inst 1 "j!1 + 1") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ball_step const-decl "Bag" balls nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Bag type-eq-decl nil balls nil) (size const-decl "nat" balls nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (remove_b const-decl "Bag" balls nil)
    (add_w const-decl "Bag" balls nil)
    (remove_w const-decl "Bag" balls nil)
    (add_b const-decl "Bag" balls nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_black? const-decl "bool" balls nil)
    (even? const-decl "bool" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   shostak))
 (Last_Ball 0
  (Last_Ball-1 nil 3795499632
   ("" (auto-rewrite-defs)
    (("" (measure-induct "size(bg)" "bg")
      (("" (skosimp*)
        (("" (rewrite "ball_game" 1)
          (("" (smash)
            (("1" (lemma Even_Black_Inv ("bg" "x!1"))
              (("1" (flatten -1)
                (("1" (lemma Ball_Step_Reduce ("bg" "x!1"))
                  (("1" (inst -4 "ball_step(x!1)")
                    (("1" (smash) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "x!1 = (1, 0) OR x!1 = (0, 1)")
              (("1" (split -1)
                (("1" (propax) nil nil)
                 ("2" (inst 1 "0") (("2" (assert) nil nil)) nil))
                nil)
               ("2" (flatten) (("2" (decompose-equality 1) nil nil))
                nil))
              nil)
             ("3" (lemma Ball_Step_Reduce ("bg" "x!1"))
              (("3" (lemma Even_Black_Inv ("bg" "x!1"))
                (("3" (flatten -1)
                  (("3" (inst -4 "ball_step(x!1)")
                    (("3" (smash) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((even? const-decl "bool" integers nil)
    (ball_step const-decl "Bag" balls nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Ball_Step_Reduce formula-decl nil balls nil)
    (Even_Black_Inv formula-decl nil balls nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pick_2 const-decl "[Ball, Ball]" balls nil)
    (B adt-constructor-decl "(B?)" balls nil)
    (B? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (W adt-constructor-decl "(W?)" balls nil)
    (W? adt-recognizer-decl "[Ball -> boolean]" balls nil)
    (ball_game def-decl "Ball" balls nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Ball type-decl nil balls nil)
    (even_black? const-decl "bool" balls nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (size const-decl "nat" balls nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil balls nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)))

